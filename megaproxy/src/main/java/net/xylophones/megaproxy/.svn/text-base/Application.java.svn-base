package net.xylophones.megaproxy;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import javax.net.ServerSocketFactory;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class Application {

	final int port = 8081;
	
	private final Log log = LogFactory.getLog(Application.class);
	
	private final int numConcurrentConnections = 1;
	
	private ExecutorService service = Executors.newFixedThreadPool(numConcurrentConnections);

	private volatile boolean running = true;

	/**
	 * @param args
	 */
	public static void main(String[] args)  {
		Application test = new Application();
		test.start();
	}
	
	private void start() {
		log.debug("starting application");
		log.debug("limiting to " + numConcurrentConnections + " concurrent requests");
		
		ServerSocket serverSocket = null;
		try {
			serverSocket = ServerSocketFactory.getDefault().createServerSocket(port);
		} catch (IOException e) {
			log.error(e);
			return;
		}
		
		if (serverSocket == null) {
			log.error("Couldn't create socket");
			return;
		}
		
		while (running) {
			try {
				log.debug("waiting for connection");
				Socket socket = serverSocket.accept();
				processConnection(socket);
			} catch (IOException e) {
				log.error("Error dealing with comnnection", e);
				break;
			}
		}
		
		log.debug("exiting application");
	}
	
	/**
	 * 
	 * 
	 * @param socket
	 */
	private void processConnection(Socket socket) throws IOException {
		log.debug("processing connection");
		
		Future<Boolean> task = service.submit( new RequestProcessor(socket) );

		/*
		try {
			Future<Boolean> task = service.submit( new NewRequestProcessor(socket) );
			
			boolean completed = task.get();
			if (completed) {
				log.debug("completed OK");
			} else {
				log.debug("completed not OK");
			}
		} catch (InterruptedException e) {
			log.error("InterruptedException", e);
		} catch (ExecutionException e) {
			log.error("ExecutionException", e);
		}
		*/
	}
}
